/* 
 * Copyright 2015 Cognitive Medical Systems, Inc (http://www.cognitivemedicine.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cognitive.bp.poc;

import com.cognitive.SimulationExecutor;
import com.cognitive.bp.poc.logger.JCpSimDataFileLogger;
import com.cognitive.bp.poc.rules.ArterialLineSimulationRules;
import com.cognitive.template.FreeFormRuleTemplate;
import com.cognitive.template.SimulationRuleTemplate;
import com.cognitive.template.SimulationTemplateEngine;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.management.InstanceNotFoundException;
import javax.management.JMX;
import javax.management.MBeanServerConnection;
import javax.management.MalformedObjectNameException;
import javax.management.ObjectName;
import javax.management.remote.JMXConnector;
import javax.management.remote.JMXConnectorFactory;
import javax.management.remote.JMXServiceURL;
import javax.swing.ImageIcon;
import javax.swing.table.TableModel;
import org.antlr.stringtemplate.StringTemplate;
import org.apache.commons.io.IOUtils;
import org.jcpsim.data.JCpSimParameter;
import org.jcpsim.jmx.JCpSimArterialLineMgmt;
import org.jcpsim.jmx.JCpSimTopMenuMgmt;
import org.jcpsim.jmx.JCpSimTopMenuMgmtMBean;
import org.jcpsim.jmx.client.JCpSimPollingClient;
import org.jcpsim.run.Global;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author esteban
 */
public class Application extends javax.swing.JFrame {

    private File logFile;
    private ImageIcon spinnerIcon = new ImageIcon(this.getClass().getResource("/img/spinner.gif"));
    private final StringTemplate executorRulesTemplate;
    private ScheduledExecutorService simulationThreadExecutor = Executors.newScheduledThreadPool(1);
    private JCpSimTopMenuMgmtMBean simMenuMgmt;
    
    
    /**
     * Creates new form Application
     */
    public Application() throws Exception {
        initComponents();
        this.createMenuMgmtBean();
        executorRulesTemplate = new StringTemplate(IOUtils.toString(Application.class.getResourceAsStream("/templates/executorRulesTemplate.tpl")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnStartStop = new javax.swing.JToggleButton();
        lblStartStopIcon = new javax.swing.JLabel();
        chkLogToFile = new javax.swing.JCheckBox();
        btnOpenLogFile = new javax.swing.JButton();
        btnCopyFilePathToClipboard = new javax.swing.JButton();
        txtInitialR = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtInitialI = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtInitialC = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDurgStages = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        txtRepetitions = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtInitialMod = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Gathering"));

        btnStartStop.setText("Start Gathering Data");
        btnStartStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartStopActionPerformed(evt);
            }
        });

        chkLogToFile.setText("Log to File");
        chkLogToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLogToFileActionPerformed(evt);
            }
        });

        btnOpenLogFile.setText("Open");
        btnOpenLogFile.setEnabled(false);
        btnOpenLogFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenLogFileActionPerformed(evt);
            }
        });

        btnCopyFilePathToClipboard.setText("Copy Path");
        btnCopyFilePathToClipboard.setToolTipText("Copy File path to clipboard");
        btnCopyFilePathToClipboard.setEnabled(false);
        btnCopyFilePathToClipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyFilePathToClipboardActionPerformed(evt);
            }
        });

        txtInitialR.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtInitialR.setText("0.5");

        jLabel1.setText("Initial R:");

        jLabel2.setText("Initial I:");

        txtInitialI.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtInitialI.setText("0.020");

        jLabel3.setText("Initial C:");

        txtInitialC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtInitialC.setText("0.30");
        txtInitialC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInitialCActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Droid Sans", 1, 13)); // NOI18N
        jLabel4.setText("Stages");

        tblDurgStages.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Stage1",  new Long(255000),  new Double(30.0), "Wave"},
                {"Drug1",  new Long(255000),  new Double(0.0), "Drug"},
                {"Stage2",  new Long(15000),  new Double(-40.0), "Wave"},
                {"Stage3",  new Long(15000),  new Double(10.0), "Wave"},
                {"Stage4",  new Long(15000),  new Double(0.0), "Wave"}
            },
            new String [] {
                "Name", "Duration", "Delta", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDurgStages);

        jLabel5.setText("Repetitions:");

        txtRepetitions.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtRepetitions.setText("0");
        txtRepetitions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRepetitionsActionPerformed(evt);
            }
        });

        jLabel6.setText("Initial Mod:");

        txtInitialMod.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtInitialMod.setText("-20");
        txtInitialMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInitialModActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtInitialI, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtInitialR, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtInitialC, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStartStopIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(chkLogToFile)
                        .addGap(306, 306, 306)
                        .addComponent(btnOpenLogFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCopyFilePathToClipboard))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtInitialMod, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnStartStop))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRepetitions, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtInitialC, txtInitialI, txtInitialR});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkLogToFile)
                    .addComponent(btnOpenLogFile)
                    .addComponent(btnCopyFilePathToClipboard))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtInitialR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtInitialI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtInitialC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(lblStartStopIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInitialMod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRepetitions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(btnStartStop))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtInitialCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInitialCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInitialCActionPerformed

    private void btnCopyFilePathToClipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyFilePathToClipboardActionPerformed
        try {
            Clipboard clipboard = Toolkit.getDefaultToolkit ().getSystemClipboard ();
            clipboard.setContents(new StringSelection(this.logFile.getCanonicalPath()), null);
        } catch (IOException ex) {
            Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCopyFilePathToClipboardActionPerformed

    private void btnOpenLogFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenLogFileActionPerformed
        try {
            Desktop.getDesktop().open(this.logFile);
        } catch (IOException ex) {
            Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnOpenLogFileActionPerformed

    private void chkLogToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLogToFileActionPerformed

        this.btnOpenLogFile.setEnabled(this.chkLogToFile.isSelected());
        this.btnCopyFilePathToClipboard.setEnabled(this.chkLogToFile.isSelected());

        if (this.chkLogToFile.isSelected()){
            try {
                //create a new file
                this.logFile = File.createTempFile("JCpSim-Model-", ".csv");

            } catch (IOException ex) {
                Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_chkLogToFileActionPerformed

    private void btnStartStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartStopActionPerformed
        if (btnStartStop.isSelected()) {
            try {
                startGatheringData();
            } catch (Exception ex) {
                Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            stopGatheringData();
        }
    }//GEN-LAST:event_btnStartStopActionPerformed

    private void txtRepetitionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRepetitionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRepetitionsActionPerformed

    private void txtInitialModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInitialModActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInitialModActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Application().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopyFilePathToClipboard;
    private javax.swing.JButton btnOpenLogFile;
    private javax.swing.JToggleButton btnStartStop;
    private javax.swing.JCheckBox chkLogToFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblStartStopIcon;
    private javax.swing.JTable tblDurgStages;
    private javax.swing.JTextField txtInitialC;
    private javax.swing.JTextField txtInitialI;
    private javax.swing.JTextField txtInitialMod;
    private javax.swing.JTextField txtInitialR;
    private javax.swing.JTextField txtRepetitions;
    // End of variables declaration//GEN-END:variables

    private void startGatheringData() throws IOException, MalformedObjectNameException, InstanceNotFoundException {
        //stop it first (just in case)
        this.stopGatheringData();
        
        this.lblStartStopIcon.setIcon(spinnerIcon);
        
        //instantiate a new JCpSimDataProvider
        final JCpSimPollingClient dataProvider = new JCpSimPollingClient(Global.MODE.SIM.getJMXUrl(), JCpSimArterialLineMgmt.OBJECT_NAME+"_"+Global.MODE.SIM);
        
        //set initial values in JCpSim
        dataProvider.set(JCpSimParameter.AA_P_RLINE, Double.parseDouble(this.txtInitialR.getText()));
        dataProvider.set(JCpSimParameter.AA_P_LLINE, Double.parseDouble(this.txtInitialI.getText()));
        dataProvider.set(JCpSimParameter.AA_P_CLINE, Double.parseDouble(this.txtInitialC.getText()));
        dataProvider.set(JCpSimParameter.AA_P_MOD, Double.parseDouble(this.txtInitialMod.getText()));
        
        
        //Create Simulation rules
        List<ArterialLineSimulationRules.ArterialLineSimulationRuleConfiguration> configs = new ArrayList();
        TableModel model = this.tblDurgStages.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            String name = (String) model.getValueAt(i, 0);
            long duration = (Long) model.getValueAt(i, 1);
            double delta = (Double) model.getValueAt(i, 2);
            ArterialLineSimulationRules.RULE_TYPE type = ArterialLineSimulationRules.RULE_TYPE.valueOf(((String)model.getValueAt(i, 3)).toUpperCase());
            configs.add(new ArterialLineSimulationRules.ArterialLineSimulationRuleConfiguration(name, delta, duration, type));
        }
        
        
        ArterialLineSimulationRules rules = new ArterialLineSimulationRules(configs, Integer.parseInt(txtRepetitions.getText())+1);
        
        //create SimulatorExecutor
        final SimulationExecutor simulationExecutor = this.createSimulationExecutor(rules, new SimulationExecutor.SimulationListener() {

            @Override
            public void onStep(int time) {
                
            }

            @Override
            public void onException(Exception e) {
            }

            @Override
            public void onPause() {
            }

            @Override
            public void onTermination() {
                stopGatheringData();
                simMenuMgmt.simulationStopped("SIM");
            }
        });
        
        //configure JCpSimDataFileLogger 
        if (this.chkLogToFile.isSelected()){
            JCpSimDataFileLogger fileLogger = new JCpSimDataFileLogger(this.logFile);
            simulationExecutor.addGlobal("fileLogger", fileLogger);
        }
        
        //schedule the execution of the simulation
        simulationThreadExecutor.schedule(new Runnable() {
            public void run() {
                simulationExecutor.execute(dataProvider);
            }
        }, 0, TimeUnit.MILLISECONDS);
        
        //notify JCPSim
        simMenuMgmt.simulationStarted("SIM");
        
        this.btnStartStop.setText("Stop Gathering Data");
    }

    private void stopGatheringData() {
        
        this.lblStartStopIcon.setIcon(null);
        this.btnStartStop.setText("Start Gathering Data");
        this.btnStartStop.setSelected(false);
        
        this.btnStartStop.setText("Start Gathering Data");
    }
    
    private SimulationExecutor createSimulationExecutor(ArterialLineSimulationRules simulationRules, SimulationExecutor.SimulationListener simulationListener) {
        SimulationTemplateEngine engine = new SimulationTemplateEngine();
        for (SimulationRuleTemplate simulationRuleTemplate : simulationRules.getRules()) {
            engine.addRuleTemplate(simulationRuleTemplate);
        }
        executorRulesTemplate.reset();

        FreeFormRuleTemplate freeFormRuleTemplate = new FreeFormRuleTemplate(executorRulesTemplate.toString());
        //freeFormRuleTemplate.addImport("com.cognitive.data.ValueModifiedToken");
        //freeFormRuleTemplate.addImport("com.cognitive.nsf.management.log.FileLogger");

        engine.addRuleTemplate(freeFormRuleTemplate);
        engine.setSimulationTime(simulationRules.getTotalExecutionTime()+"ms");
        return new SimulationExecutor(engine, simulationListener, 10);
    }
    
    private void createMenuMgmtBean() throws MalformedURLException, MalformedObjectNameException, IOException{
        JMXServiceURL serviceUrl = new JMXServiceURL(Global.MODE.SIM.getJMXUrl());
        JMXConnector jmxc = JMXConnectorFactory.connect(serviceUrl, null);
        MBeanServerConnection connection = jmxc.getMBeanServerConnection();

        this.simMenuMgmt = JMX.newMBeanProxy(connection, new ObjectName(JCpSimTopMenuMgmt.OBJECT_NAME), 
                                          JCpSimTopMenuMgmtMBean.class, true);
    }
}
