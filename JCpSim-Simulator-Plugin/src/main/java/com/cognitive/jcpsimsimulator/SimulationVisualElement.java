/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cognitive.jcpsimsimulator;

import com.cognitive.jcpsimsimulator.tablemodel.PeriodicalRuleTemplateTableModel;
import com.cognitive.jcpsimsimulator.tablemodel.PointInTimeRuleTemplateTableModel;
import com.cognitive.jcpsimsimulator.tablemodel.ThresholdRuleTemplateTableModel;
import com.cognitive.template.PeriodicalFixedRuleTemplate;
import com.cognitive.template.PeriodicalRuleTemplate;
import com.cognitive.template.PointInTimeRuleTemplate;
import com.cognitive.template.SimulationRuleTemplate;
import com.cognitive.template.SimulationTemplateEngine;
import com.cognitive.template.ThresholdRuleTemplate;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
    displayName = "#LBL_Simulation_VISUAL",
iconBase = "com/cognitive/jcpsimsimulator/chart.png",
mimeType = "text/jcpsim-sim",
persistenceType = TopComponent.PERSISTENCE_NEVER,
preferredID = "SimulationVisual",
position = 1000)
@Messages("LBL_Simulation_VISUAL=Configuration")
public final class SimulationVisualElement extends JPanel implements MultiViewElement {

    private SimulationDataObject obj;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;
    private PeriodicalRuleTemplateTableModel tblPeriodicalRulesTableModel = new PeriodicalRuleTemplateTableModel();
    private ThresholdRuleTemplateTableModel tblThresholdRulesTableModel = new ThresholdRuleTemplateTableModel();
    private PointInTimeRuleTemplateTableModel tblPointInTimeRulesTableModel = new PointInTimeRuleTemplateTableModel();
    private String simulationEngineId;
    private boolean changeListenersEnabled;
    TableModelListener modificationModelListener = new TableModelListener() {
        @Override
        public void tableChanged(TableModelEvent e) {
            if (changeListenersEnabled) {
                obj.onEngineModifiedFromUI(createSimulationEngine());
            }
        }
    };
    DocumentListener textChangeListener = new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
            notifyChange();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            notifyChange();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            notifyChange();
        }

        private void notifyChange() {
            if (changeListenersEnabled) {
                obj.onEngineModifiedFromUI(createSimulationEngine());
            }
        }
    };

    public SimulationVisualElement(Lookup lkp) {
        obj = lkp.lookup(SimulationDataObject.class);
        assert obj != null;
        initComponents();

        this.tblPointInTimeRules.setColumnModel(tblPointInTimeRulesTableModel.createTableColumnModel());
        this.tblPointInTimeRules.setModel(tblPointInTimeRulesTableModel);


        this.tblPeriodicalRules.setColumnModel(tblPeriodicalRulesTableModel.createTableColumnModel());
        this.tblPeriodicalRules.setModel(tblPeriodicalRulesTableModel);


        this.tblThresholdRules.setColumnModel(tblThresholdRulesTableModel.createTableColumnModel());
        this.tblThresholdRules.setModel(tblThresholdRulesTableModel);


        this.tblPointInTimeRulesTableModel.addTableModelListener(modificationModelListener);
        this.tblPeriodicalRulesTableModel.addTableModelListener(modificationModelListener);
        this.tblThresholdRulesTableModel.addTableModelListener(modificationModelListener);
        this.txtSimulationDuration.getDocument().addDocumentListener(textChangeListener);

        populateUI();

    }

    @Override
    public String getName() {
        return "SimulationVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSimulationDuration = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPeriodicalRules = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblThresholdRules = new javax.swing.JTable();
        btnAddPeriodicalRule = new javax.swing.JButton();
        btnDelPeriodicalRule = new javax.swing.JButton();
        btnAddThresholdRule = new javax.swing.JButton();
        btnDelThresholdRule = new javax.swing.JButton();
        btnAddPointInTimeRule = new javax.swing.JButton();
        btnDelPointInTimeRule = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPointInTimeRules = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        txtSimulationDuration.setText(org.openide.util.NbBundle.getMessage(SimulationVisualElement.class, "JCpSimSimulationVisualElement.txtSimulationDuration.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SimulationVisualElement.class, "JCpSimSimulationVisualElement.jLabel1.text")); // NOI18N

        tblPeriodicalRules.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblPeriodicalRules);

        tblThresholdRules.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblThresholdRules);

        org.openide.awt.Mnemonics.setLocalizedText(btnAddPeriodicalRule, org.openide.util.NbBundle.getMessage(SimulationVisualElement.class, "JCpSimSimulationVisualElement.btnAddPeriodicalRule.text")); // NOI18N
        btnAddPeriodicalRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPeriodicalRuleActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnDelPeriodicalRule, org.openide.util.NbBundle.getMessage(SimulationVisualElement.class, "JCpSimSimulationVisualElement.btnDelPeriodicalRule.text")); // NOI18N
        btnDelPeriodicalRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelPeriodicalRuleActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnAddThresholdRule, org.openide.util.NbBundle.getMessage(SimulationVisualElement.class, "JCpSimSimulationVisualElement.btnAddThresholdRule.text")); // NOI18N
        btnAddThresholdRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddThresholdRuleActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnDelThresholdRule, org.openide.util.NbBundle.getMessage(SimulationVisualElement.class, "JCpSimSimulationVisualElement.btnDelThresholdRule.text")); // NOI18N
        btnDelThresholdRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelThresholdRuleActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnAddPointInTimeRule, org.openide.util.NbBundle.getMessage(SimulationVisualElement.class, "JCpSimSimulationVisualElement.btnAddPointInTimeRule.text")); // NOI18N
        btnAddPointInTimeRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPointInTimeRuleActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnDelPointInTimeRule, org.openide.util.NbBundle.getMessage(SimulationVisualElement.class, "JCpSimSimulationVisualElement.btnDelPointInTimeRule.text")); // NOI18N
        btnDelPointInTimeRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelPointInTimeRuleActionPerformed(evt);
            }
        });

        tblPointInTimeRules.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblPointInTimeRules);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SimulationVisualElement.class, "JCpSimSimulationVisualElement.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(SimulationVisualElement.class, "JCpSimSimulationVisualElement.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(SimulationVisualElement.class, "JCpSimSimulationVisualElement.jLabel4.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSimulationDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddThresholdRule)
                        .addGap(3, 3, 3)
                        .addComponent(btnDelThresholdRule))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddPeriodicalRule)
                        .addGap(3, 3, 3)
                        .addComponent(btnDelPeriodicalRule))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddPointInTimeRule)
                        .addGap(3, 3, 3)
                        .addComponent(btnDelPointInTimeRule)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSimulationDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddPointInTimeRule)
                    .addComponent(btnDelPointInTimeRule)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddPeriodicalRule)
                    .addComponent(btnDelPeriodicalRule)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddThresholdRule)
                    .addComponent(btnDelThresholdRule)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addGap(46, 46, 46))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddPeriodicalRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPeriodicalRuleActionPerformed
        this.tblPeriodicalRulesTableModel.addRow();
    }//GEN-LAST:event_btnAddPeriodicalRuleActionPerformed

    private void btnDelPeriodicalRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelPeriodicalRuleActionPerformed
        int[] selectedRows = this.tblPeriodicalRules.getSelectedRows();
        for (int i = selectedRows.length - 1; i == 0; i--) {
            this.tblPeriodicalRulesTableModel.deleteRowAt(selectedRows[i]);
        }
    }//GEN-LAST:event_btnDelPeriodicalRuleActionPerformed

    private void btnAddThresholdRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddThresholdRuleActionPerformed
        this.tblThresholdRulesTableModel.addRow();
    }//GEN-LAST:event_btnAddThresholdRuleActionPerformed

    private void btnDelThresholdRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelThresholdRuleActionPerformed
        int[] selectedRows = this.tblThresholdRules.getSelectedRows();
        for (int i = selectedRows.length - 1; i == 0; i--) {
            this.tblThresholdRulesTableModel.deleteRowAt(selectedRows[i]);
        }
    }//GEN-LAST:event_btnDelThresholdRuleActionPerformed

    private void btnAddPointInTimeRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPointInTimeRuleActionPerformed
        this.tblPointInTimeRulesTableModel.addRow();
    }//GEN-LAST:event_btnAddPointInTimeRuleActionPerformed

    private void btnDelPointInTimeRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelPointInTimeRuleActionPerformed
        int[] selectedRows = this.tblPointInTimeRules.getSelectedRows();
        for (int i = selectedRows.length - 1; i == 0; i--) {
            this.tblPointInTimeRulesTableModel.deleteRowAt(selectedRows[i]);
        }
    }//GEN-LAST:event_btnDelPointInTimeRuleActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPeriodicalRule;
    private javax.swing.JButton btnAddPointInTimeRule;
    private javax.swing.JButton btnAddThresholdRule;
    private javax.swing.JButton btnDelPeriodicalRule;
    private javax.swing.JButton btnDelPointInTimeRule;
    private javax.swing.JButton btnDelThresholdRule;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblPeriodicalRules;
    private javax.swing.JTable tblPointInTimeRules;
    private javax.swing.JTable tblThresholdRules;
    private javax.swing.JTextField txtSimulationDuration;
    // End of variables declaration//GEN-END:variables

    public SimulationTemplateEngine createSimulationEngine() {
        SimulationTemplateEngine engine = new SimulationTemplateEngine(this.txtSimulationDuration.getText());

        List<SimulationRuleTemplate> rules = new ArrayList<SimulationRuleTemplate>();

        rules.addAll(this.tblPointInTimeRulesTableModel.getRules());
        rules.addAll(this.tblPeriodicalRulesTableModel.getRules());
        rules.addAll(this.tblThresholdRulesTableModel.getRules());

        for (SimulationRuleTemplate rule : rules) {
            engine.addRuleTemplate(rule);
        }

        this.simulationEngineId = engine.getId();
        return engine;
    }

    public String getSimulationEngineId() {
        return simulationEngineId;
    }

    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[]{
                    new AbstractAction("Do Something") {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            JOptionPane.showMessageDialog(SimulationVisualElement.this, obj.getPrimaryFile().toString());
                        }
                    }
                };
    }

    @Override
    public Lookup getLookup() {
        return obj.getLookup();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
        if (callback != null) {
            callback.updateTitle(obj.getName());
        }

        this.populateUI();
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    protected void cleanupUI() {
        this.txtSimulationDuration.setText("");
        this.tblThresholdRulesTableModel.clear();
        this.tblPointInTimeRulesTableModel.clear();
        this.tblPeriodicalRulesTableModel.clear();
    }

    protected void populateUI() {
        disableChangeListeners();
        this.cleanupUI();
        SimulationTemplateEngine engine = obj.getEngine();
        this.txtSimulationDuration.setText(engine.getSimulationTime());

        for (SimulationRuleTemplate rule : engine.getRuleTemplates()) {
            if (rule instanceof ThresholdRuleTemplate) {
                this.tblThresholdRulesTableModel.addRow((ThresholdRuleTemplate) rule);
            } else if (rule instanceof PointInTimeRuleTemplate) {
                this.tblPointInTimeRulesTableModel.addRow((PointInTimeRuleTemplate) rule);
            } else if (rule instanceof PeriodicalRuleTemplate) {
                this.tblPeriodicalRulesTableModel.addRow((PeriodicalRuleTemplate) rule);
            } else if (rule instanceof PeriodicalFixedRuleTemplate) {
                this.tblPeriodicalRulesTableModel.addRow((PeriodicalFixedRuleTemplate) rule);
            }
        }
        enableChangeListeners();
    }

    protected void disableChangeListeners() {
        changeListenersEnabled = false;
    }

    protected void enableChangeListeners() {
        changeListenersEnabled = true;
    }
}
